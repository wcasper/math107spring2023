%%%
%% Program name: Lecture 2 Code
%% Author: W. Riley Casper
%% Last updated: 01/18/2021
%% Description: This program provides an introduction to initializing vectors
%% and matrices in MATLAB.


%% Creating matrices
% The primary data structures in MATLAB are matrices, which are basically
% rectangular grids of numbers such as
% [ 1 3 4 3 ]
% [ 2 1 5 2 ] 
% [ 4 3 2 1 ]
% which is an example of a 3x4 matrix.  The first number of rows, and the
% second corresponds to the number of columns.

% To create the same matrix in MATLAB, we can use the command
[1 3 4 3;2 1 5 2;4 3 2 1]
% Here the spaces distinguish between different entries in the same row and the
% semicolons break up the different rows.

% We can also use commas instead of spaces, so the same matrix is generated by
[1,3,4,3;2,1,5,2;4,3,2,1]

% We can also make variables which are matrix valued.  The command
A = [2,3;1,2;4,0]
% creates a variable A whose value is the 3x2 matrix
% [ 2 3 ]
% [ 1 2 ]
% [ 4 0 ]

%% Special matrices
% Some matrices are needed so often that there is a special way to generate
% them.  We will go over several examples of these next.

% Zero matrix:
%   To create a mxn matrix whose entries are all zeros, we use the command
%   zero(m,n).
% Example: the command
zero(2,3)
% creates the matrix
% [ 0 0 0 ]
% [ 0 0 0 ]

% Ones matrix:
%   To create a mxn matrix whose entries are all ones, we use the command
%   ones(m,n).
%
% Example: the command
ones(2,2)
% creates the matrix
% [ 1 1 ]
% [ 1 1 ]

% Identity matrix:
%   To create a an nxn square matrix whose diagonal entries are all ones and
%   whose off-diagonal entries are all zeros, we use the command eye(n)
% Example: the command
eye(2)
% creates the matrix
% [ 1 0 ]
% [ 0 1 ]

% Index arrays:
%   To create a row vector whose entries are
%   [k k+1 k+2 k+3 k+4 ... j-2 j-1 j] we can use the colon operator, ie. [k:j]
%   We can also do every other entry or every third entry and so on by using an
%   additional colon.
%
% Example: the command
[3:7]
% creates the matrix
% [3 4 5 6 7]
% Example: the command
[3:2:7]
% creates the same matrix but skips every other entry
% [3 5 7]

% Linearly spaced arrays:
%   As a generalization of the previous example, we can use the linspace(a,b,n)
%   command to create an array of n equally spaced values between a and b
%
% Example: the command
linspace(-1,1,5)
% creates the matrix
% [-1.0 -0.5 0.0 0.5 1.0]

%% Matrix entries
% The (i,j) entry of a matrix A is the entry which lies in the i'th row and
% j'th column.  To access the (i,j) entry of a matrix A, we use A(i,j)
% For example
A = [1 3 4; 2 5 7; 3 4 3]
A(1,3)
% will return the value 4, which is the entry in the 1st row and 3rd column

% We can also individual rows and columns using colon notation.
% For example
A(:,3)
% returns the third column
% [ 4 ]
% [ 7 ]
% [ 3 ]
% Likewise
A(2,:)
% returns the second row
% [ 2 5 7 ]

% Even better, we can access full submatrices of a matrix using the same
% pattern.  For example, to access the upper left 2x2 submatrix of the matrix
% A, we can use the command
A(1:2,1:2)
% which returns
% [ 1 3 ]
% [ 2 5 ]
% To get the submatrix consisting of just the second and third rows, we can use
A(2:3,:)



